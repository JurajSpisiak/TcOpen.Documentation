### YamlMime:ManagedReference
items:
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter
  commentId: T:TcOpen.Inxton.Logging.DummyLoggerAdapter
  id: DummyLoggerAdapter
  parent: TcOpen.Inxton.Logging
  children:
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.#ctor
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug``1(System.String,``0)
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.Error``1(System.String,``0)
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal``1(System.String,``0)
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.Information``1(System.String,``0)
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.lastMessage
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.MessageQueue
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose``1(System.String,``0)
  - TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning``1(System.String,``0)
  langs:
  - csharp
  - vb
  name: DummyLoggerAdapter
  nameWithType: DummyLoggerAdapter
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter
  type: Class
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: DummyLoggerAdapter
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 10
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  summary: "\nDefault logger implementation with no real logging capability. \nProvides an empty implementation of logging for the framework when no other logger created.    \n"
  example: []
  syntax:
    content: 'public class DummyLoggerAdapter : ITcoLogger'
    content.vb: >-
      Public Class DummyLoggerAdapter
          Implements ITcoLogger
  inheritance:
  - System.Object
  implements:
  - TcOpen.Inxton.Logging.ITcoLogger
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.MessageQueue
  commentId: F:TcOpen.Inxton.Logging.DummyLoggerAdapter.MessageQueue
  id: MessageQueue
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: MessageQueue
  nameWithType: DummyLoggerAdapter.MessageQueue
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.MessageQueue
  type: Field
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: MessageQueue
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 14
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: >-
      [Obsolete("This property is only for testing. Do not queue messages in production!")]

      public ConcurrentQueue<(string message, object payload, string serverity)> MessageQueue
    return:
      type: System.Collections.Concurrent.ConcurrentQueue{System.ValueTuple{System.String,System.Object,System.String}}
    content.vb: >-
      <Obsolete("This property is only for testing. Do not queue messages in production!")>

      Public MessageQueue As ConcurrentQueue(Of(message As String, payload As Object, serverity As String))
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This property is only for testing. Do not queue messages in production!
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages
  id: QueueMessages
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: QueueMessages()
  nameWithType: DummyLoggerAdapter.QueueMessages()
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages()
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: QueueMessages
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 16
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: >-
      [Obsolete("This method is only for testing. Do not queue messages in production!")]

      public void QueueMessages()
    content.vb: >-
      <Obsolete("This method is only for testing. Do not queue messages in production!")>

      Public Sub QueueMessages
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This method is only for testing. Do not queue messages in production!
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.lastMessage
  commentId: F:TcOpen.Inxton.Logging.DummyLoggerAdapter.lastMessage
  id: lastMessage
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: lastMessage
  nameWithType: DummyLoggerAdapter.lastMessage
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.lastMessage
  type: Field
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: lastMessage
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 23
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: (string message, object payload, string serverity) lastMessage
    return:
      type: System.ValueTuple{System.String,System.Object,System.String}
    content.vb: lastMessage As(message As String, payload As Object, serverity As String)
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage
  commentId: P:TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage
  id: LastMessage
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: LastMessage
  nameWithType: DummyLoggerAdapter.LastMessage
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage
  type: Property
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: LastMessage
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 25
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public (string message, object payload, string serverity) LastMessage { get; }
    parameters: []
    return:
      type: System.ValueTuple{System.String,System.Object,System.String}
    content.vb: Public ReadOnly Property LastMessage As(message As String, payload As Object, serverity As String)
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.#ctor
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.#ctor
  id: '#ctor'
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: DummyLoggerAdapter()
  nameWithType: DummyLoggerAdapter.DummyLoggerAdapter()
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.DummyLoggerAdapter()
  type: Constructor
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: .ctor
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 27
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public DummyLoggerAdapter()
    content.vb: Public Sub New
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage
  id: ClearLastMessage
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: ClearLastMessage()
  nameWithType: DummyLoggerAdapter.ClearLastMessage()
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage()
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: ClearLastMessage
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 32
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public void ClearLastMessage()
    content.vb: Public Sub ClearLastMessage
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty
  id: IsLastMessageEmpty
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: IsLastMessageEmpty()
  nameWithType: DummyLoggerAdapter.IsLastMessageEmpty()
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty()
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: IsLastMessageEmpty
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 37
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public bool IsLastMessageEmpty()
    return:
      type: System.Boolean
    content.vb: Public Function IsLastMessageEmpty As Boolean
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug``1(System.String,``0)
  id: Debug``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: Debug<T>(String, T)
  nameWithType: DummyLoggerAdapter.Debug<T>(String, T)
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Debug
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 42
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public void Debug<T>(string stringTemplate, T payload = null)
    parameters:
    - id: stringTemplate
      type: System.String
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub Debug(Of T)(stringTemplate As String, payload As T = Nothing)
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug*
  implements:
  - TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,{T})
  nameWithType.vb: DummyLoggerAdapter.Debug(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug(Of T)(System.String, T)
  name.vb: Debug(Of T)(String, T)
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Error``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.Error``1(System.String,``0)
  id: Error``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: Error<T>(String, T)
  nameWithType: DummyLoggerAdapter.Error<T>(String, T)
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Error<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Error
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 47
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public void Error<T>(string stringTemplate, T payload = null)
    parameters:
    - id: stringTemplate
      type: System.String
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub Error(Of T)(stringTemplate As String, payload As T = Nothing)
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.Error*
  implements:
  - TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,{T})
  nameWithType.vb: DummyLoggerAdapter.Error(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.Logging.DummyLoggerAdapter.Error(Of T)(System.String, T)
  name.vb: Error(Of T)(String, T)
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal``1(System.String,``0)
  id: Fatal``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: Fatal<T>(String, T)
  nameWithType: DummyLoggerAdapter.Fatal<T>(String, T)
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Fatal
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 52
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public void Fatal<T>(string stringTemplate, T payload = null)
    parameters:
    - id: stringTemplate
      type: System.String
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub Fatal(Of T)(stringTemplate As String, payload As T = Nothing)
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal*
  implements:
  - TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,{T})
  nameWithType.vb: DummyLoggerAdapter.Fatal(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal(Of T)(System.String, T)
  name.vb: Fatal(Of T)(String, T)
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Information``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.Information``1(System.String,``0)
  id: Information``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: Information<T>(String, T)
  nameWithType: DummyLoggerAdapter.Information<T>(String, T)
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Information<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Information
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 57
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public void Information<T>(string stringTemplate, T payload = null)
    parameters:
    - id: stringTemplate
      type: System.String
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub Information(Of T)(stringTemplate As String, payload As T = Nothing)
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.Information*
  implements:
  - TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,{T})
  nameWithType.vb: DummyLoggerAdapter.Information(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.Logging.DummyLoggerAdapter.Information(Of T)(System.String, T)
  name.vb: Information(Of T)(String, T)
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose``1(System.String,``0)
  id: Verbose``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: Verbose<T>(String, T)
  nameWithType: DummyLoggerAdapter.Verbose<T>(String, T)
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Verbose
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 62
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public void Verbose<T>(string stringTemplate, T payload = null)
    parameters:
    - id: stringTemplate
      type: System.String
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub Verbose(Of T)(stringTemplate As String, payload As T = Nothing)
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose*
  implements:
  - TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,{T})
  nameWithType.vb: DummyLoggerAdapter.Verbose(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose(Of T)(System.String, T)
  name.vb: Verbose(Of T)(String, T)
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning``1(System.String,``0)
  id: Warning``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.DummyLoggerAdapter
  langs:
  - csharp
  - vb
  name: Warning<T>(String, T)
  nameWithType: DummyLoggerAdapter.Warning<T>(String, T)
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
      branch: eagle
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Warning
    path: ../TcOpen/src/TcOpen.Inxton/src/Logging/TcoOpen.Inxton.Logging/DummyLoggerAdapter.cs
    startLine: 67
  assemblies:
  - TcOpen.Inxton.Logging
  namespace: TcOpen.Inxton.Logging
  syntax:
    content: public void Warning<T>(string stringTemplate, T payload = null)
    parameters:
    - id: stringTemplate
      type: System.String
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub Warning(Of T)(stringTemplate As String, payload As T = Nothing)
  overload: TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning*
  implements:
  - TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,{T})
  nameWithType.vb: DummyLoggerAdapter.Warning(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning(Of T)(System.String, T)
  name.vb: Warning(Of T)(String, T)
references:
- uid: TcOpen.Inxton.Logging
  commentId: N:TcOpen.Inxton.Logging
  name: TcOpen.Inxton.Logging
  nameWithType: TcOpen.Inxton.Logging
  fullName: TcOpen.Inxton.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TcOpen.Inxton.Logging.ITcoLogger
  commentId: T:TcOpen.Inxton.Logging.ITcoLogger
  parent: TcOpen.Inxton.Logging
  name: ITcoLogger
  nameWithType: ITcoLogger
  fullName: TcOpen.Inxton.Logging.ITcoLogger
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Concurrent.ConcurrentQueue{System.ValueTuple{System.String,System.Object,System.String}}
  commentId: T:System.Collections.Concurrent.ConcurrentQueue{System.ValueTuple{System.String,System.Object,System.String}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentQueue`1
  name: ConcurrentQueue<ValueTuple<String, Object, String>>
  nameWithType: ConcurrentQueue<ValueTuple<String, Object, String>>
  fullName: System.Collections.Concurrent.ConcurrentQueue<System.ValueTuple<System.String, System.Object, System.String>>
  nameWithType.vb: ConcurrentQueue(Of ValueTuple(Of String, Object, String))
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of System.ValueTuple(Of System.String, System.Object, System.String))
  name.vb: ConcurrentQueue(Of ValueTuple(Of String, Object, String))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentQueue`1
  commentId: T:System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: true
  name: ConcurrentQueue<T>
  nameWithType: ConcurrentQueue<T>
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>
  nameWithType.vb: ConcurrentQueue(Of T)
  fullName.vb: System.Collections.Concurrent.ConcurrentQueue(Of T)
  name.vb: ConcurrentQueue(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: System.Collections.Concurrent.ConcurrentQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages
  name: QueueMessages
  nameWithType: DummyLoggerAdapter.QueueMessages
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.QueueMessages
- uid: System.ValueTuple{System.String,System.Object,System.String}
  commentId: T:System.ValueTuple{System.String,System.Object,System.String}
  parent: System
  isExternal: true
  name: ValueTuple<String, Object, String>
  nameWithType: ValueTuple<String, Object, String>
  fullName: System.ValueTuple<System.String, System.Object, System.String>
  nameWithType.vb: ValueTuple(Of String, Object, String)
  fullName.vb: System.ValueTuple(Of System.String, System.Object, System.String)
  name.vb: ValueTuple(Of String, Object, String)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage
  name: LastMessage
  nameWithType: DummyLoggerAdapter.LastMessage
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.LastMessage
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.#ctor*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.#ctor
  name: DummyLoggerAdapter
  nameWithType: DummyLoggerAdapter.DummyLoggerAdapter
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.DummyLoggerAdapter
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage
  name: ClearLastMessage
  nameWithType: DummyLoggerAdapter.ClearLastMessage
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.ClearLastMessage
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty
  name: IsLastMessageEmpty
  nameWithType: DummyLoggerAdapter.IsLastMessageEmpty
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.IsLastMessageEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug
  name: Debug
  nameWithType: DummyLoggerAdapter.Debug
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Debug
- uid: TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,{T})
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.ITcoLogger
  definition: TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
  name: Debug<T>(String, T)
  nameWithType: ITcoLogger.Debug<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Debug<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Debug(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Debug(Of T)(System.String, T)
  name.vb: Debug(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
    name: Debug<T>
    nameWithType: ITcoLogger.Debug<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Debug<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
    name: Debug(Of T)
    nameWithType: ITcoLogger.Debug(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Debug(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
  isExternal: true
  name: Debug<T>(String, T)
  nameWithType: ITcoLogger.Debug<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Debug<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Debug(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Debug(Of T)(System.String, T)
  name.vb: Debug(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
    name: Debug<T>
    nameWithType: ITcoLogger.Debug<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Debug<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Debug``1(System.String,``0)
    name: Debug(Of T)
    nameWithType: ITcoLogger.Debug(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Debug(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Error*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.Error
  name: Error
  nameWithType: DummyLoggerAdapter.Error
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Error
- uid: TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,{T})
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.ITcoLogger
  definition: TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
  name: Error<T>(String, T)
  nameWithType: ITcoLogger.Error<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Error<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Error(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Error(Of T)(System.String, T)
  name.vb: Error(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
    name: Error<T>
    nameWithType: ITcoLogger.Error<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Error<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
    name: Error(Of T)
    nameWithType: ITcoLogger.Error(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Error(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
  isExternal: true
  name: Error<T>(String, T)
  nameWithType: ITcoLogger.Error<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Error<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Error(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Error(Of T)(System.String, T)
  name.vb: Error(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
    name: Error<T>
    nameWithType: ITcoLogger.Error<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Error<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Error``1(System.String,``0)
    name: Error(Of T)
    nameWithType: ITcoLogger.Error(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Error(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal
  name: Fatal
  nameWithType: DummyLoggerAdapter.Fatal
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Fatal
- uid: TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,{T})
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.ITcoLogger
  definition: TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
  name: Fatal<T>(String, T)
  nameWithType: ITcoLogger.Fatal<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Fatal<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Fatal(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Fatal(Of T)(System.String, T)
  name.vb: Fatal(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
    name: Fatal<T>
    nameWithType: ITcoLogger.Fatal<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Fatal<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
    name: Fatal(Of T)
    nameWithType: ITcoLogger.Fatal(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Fatal(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
  isExternal: true
  name: Fatal<T>(String, T)
  nameWithType: ITcoLogger.Fatal<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Fatal<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Fatal(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Fatal(Of T)(System.String, T)
  name.vb: Fatal(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
    name: Fatal<T>
    nameWithType: ITcoLogger.Fatal<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Fatal<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Fatal``1(System.String,``0)
    name: Fatal(Of T)
    nameWithType: ITcoLogger.Fatal(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Fatal(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Information*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.Information
  name: Information
  nameWithType: DummyLoggerAdapter.Information
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Information
- uid: TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,{T})
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.ITcoLogger
  definition: TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
  name: Information<T>(String, T)
  nameWithType: ITcoLogger.Information<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Information<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Information(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Information(Of T)(System.String, T)
  name.vb: Information(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
    name: Information<T>
    nameWithType: ITcoLogger.Information<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Information<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
    name: Information(Of T)
    nameWithType: ITcoLogger.Information(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Information(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
  isExternal: true
  name: Information<T>(String, T)
  nameWithType: ITcoLogger.Information<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Information<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Information(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Information(Of T)(System.String, T)
  name.vb: Information(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
    name: Information<T>
    nameWithType: ITcoLogger.Information<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Information<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Information``1(System.String,``0)
    name: Information(Of T)
    nameWithType: ITcoLogger.Information(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Information(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose
  name: Verbose
  nameWithType: DummyLoggerAdapter.Verbose
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Verbose
- uid: TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,{T})
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.ITcoLogger
  definition: TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
  name: Verbose<T>(String, T)
  nameWithType: ITcoLogger.Verbose<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Verbose<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Verbose(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Verbose(Of T)(System.String, T)
  name.vb: Verbose(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
    name: Verbose<T>
    nameWithType: ITcoLogger.Verbose<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Verbose<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
    name: Verbose(Of T)
    nameWithType: ITcoLogger.Verbose(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Verbose(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
  isExternal: true
  name: Verbose<T>(String, T)
  nameWithType: ITcoLogger.Verbose<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Verbose<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Verbose(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Verbose(Of T)(System.String, T)
  name.vb: Verbose(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
    name: Verbose<T>
    nameWithType: ITcoLogger.Verbose<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Verbose<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Verbose``1(System.String,``0)
    name: Verbose(Of T)
    nameWithType: ITcoLogger.Verbose(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Verbose(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning*
  commentId: Overload:TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning
  name: Warning
  nameWithType: DummyLoggerAdapter.Warning
  fullName: TcOpen.Inxton.Logging.DummyLoggerAdapter.Warning
- uid: TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,{T})
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
  parent: TcOpen.Inxton.Logging.ITcoLogger
  definition: TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
  name: Warning<T>(String, T)
  nameWithType: ITcoLogger.Warning<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Warning<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Warning(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Warning(Of T)(System.String, T)
  name.vb: Warning(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
    name: Warning<T>
    nameWithType: ITcoLogger.Warning<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Warning<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
    name: Warning(Of T)
    nameWithType: ITcoLogger.Warning(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Warning(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
  commentId: M:TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
  isExternal: true
  name: Warning<T>(String, T)
  nameWithType: ITcoLogger.Warning<T>(String, T)
  fullName: TcOpen.Inxton.Logging.ITcoLogger.Warning<T>(System.String, T)
  nameWithType.vb: ITcoLogger.Warning(Of T)(String, T)
  fullName.vb: TcOpen.Inxton.Logging.ITcoLogger.Warning(Of T)(System.String, T)
  name.vb: Warning(Of T)(String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
    name: Warning<T>
    nameWithType: ITcoLogger.Warning<T>
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Warning<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Logging.ITcoLogger.Warning``1(System.String,``0)
    name: Warning(Of T)
    nameWithType: ITcoLogger.Warning(Of T)
    fullName: TcOpen.Inxton.Logging.ITcoLogger.Warning(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
